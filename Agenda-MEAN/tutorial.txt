***********************************************
****    SERVER NODE + EXPRESS + MongoDB    ****
***********************************************

$ npm init -y       //crear proyecto de nodejs
$ npm i express

(SET UP SERVER I) 
* Archivo index.js:  
    - crear instancia (app) de express i aplicar metodos para que se mantenga a la escucha;
        $ node server/index.js      //arrancar server desde terminal 

(SET UP NODEMON)
$ npm i nodemon -D      //para arrancar server cuando nodemon detecte cambios (-D para que se instale como dependencia de desarrollo y no del proyecto)
* Archivo package.json:
        "scripts": {
            "dev": "nodemon server/index.js"
        },
        //copiar esa linea en scripts y arrancar el server mediante nodemon con:

        $ npm run dev

(SET UP SERVER II)
* Archivo index.js:
    - Middlewares:
        $ npm i morgan      // muestra por consola las peticiones http 
    
    - crear la instancia de morgan y implementar su uso en express >>  app.use("morgan");
        ahora, cuando se hace refresh, en la terminal se ve la petición que se ha realizado, resultado, tiempo, etc.
    - configurar el server para que entienda JSON >> app.use(express.json());

(SET UP DATABASE I)
    $ npm i mongoose        // a MongoDB object modeling tool designed to work in an asynchronous environment
    - instalar MongoDB (si no está instalado previamente) y arrancar la database por cli.

* Archivo database.js:
    - crear la instancia de mongoose y conectarlo a la URI de MongoDB.
    - exportar el módulo.

* Archivo index.js:
    - importar la conexión a la DB y testear el funcionamiento.

(SET UP ROUTES)
* Archivo /routes/contact.routes.js:
    - importar express para crear las rutas del server mediante el objeto express.Router();  exportar el router;
    - testear con una petición a la raiz del proyecto:

                router.get("/", (req, res) => {
                    res.json({
                        status: "API works"
                    });
                });

* Archivo index.js:
    - importar el router para que lo use app, relanzar el server y ver la respuesta json en localhost:3000/

* Archivo models/contact.js:
    - crear el modelo de datos.
    - requerir mongoose para utilizar sus Schemas.  Crear Schema de mongoDB y almacenarlo en una constante.  Exportarla.

* Archivo /routes/contact.routes.js:
    - ahora si, crear las rutas completas para cada peticion GET o POST.
    ** El archivo /controllers/contact.controller.js es el que va a tener todo el codigo a ejecutar en cada petición,
    por lo que hay que requerirlo en /routes/contact.routes.js y aplicar sus métodos segun petición y ruta.

* Archivo /controllers/contact.controller.js:
    - crear las respuestas de cada petición (async).

---------------------------------------------------------------------------------------------------------------------------
------------------------------------------------     FIN DE SERVER SETUP   ------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------

********************
****  ANGULAR   ****
********************

* En la carpeta del proyecto, instalar angular cli:        
    $ npm i -g @angular/cli

* También en la carpeta raiz del proyecto, crear el proyecto frontend de angular:
    $ ng new frontend

* Estructurar el proyecto:
    - crea carpeta /frontend/src/app/components, models y services.
    - crear componente dentro de /components -->     $ ng generate component contacts
    - crear el modelo de datos en /models -->       $ ng g class contact
    - crear el servicio en /services -->            $ ng g s contact 

* Verificar en /frontend/src/app/app.modules.ts que se ha importado el componente contacts.  * Fijate que no se ha importado el service
* Como en la app vamos a usar un formulario, ya que estamos aqui, importar también el FormsModule

--------------------------------------------------------------------------------------------------------------------------------

** /frontend/src/index.html

    * materializecss:
    - head:    
        <!-- Compiled and minified CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
        <!-- Material+Icons -->
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    - body:
        <!-- Compiled and minified JavaScript -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>


** /frontend/src/app/app.component.html
    - Añadir componente al html.
    - Decorar la vista del componente principal, digamos el marco de la página (nav-bar, footer y lo que se quiera)


** /frontend/src/app/components/contacts/contacts.component.html
    - Decorar como vamos a querer mostrar el formulario
    - Preparar el formulario de recogida de datos del contacto con un (ngSubmit), que recogerá los datos de #contactForm,
    que es él mismo.

-----------------------------

** /frontend/src/app/services/contact.service.ts 
    - La funcion de este archivo es definir los metodos que se van a usar y que pueden ser reutilizados para hacer el CRUD a la REST-API.
    - importar el modulo HttpClient.



